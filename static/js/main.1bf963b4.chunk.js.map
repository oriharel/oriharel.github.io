{"version":3,"sources":["logo.svg","maps/MapComponent.js","components/FileInput.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getTime","startTimestampMs","Date","Number","MapContainer","props","useState","latitude","longitude","setMapCenter","marker","text","activeMarker","setActiveMarker","useEffect","navigator","geolocation","getCurrentPosition","position","coords","err","console","error","alert","google","zoom","initialCenter","lat","lng","userPositions","map","currMarker","key","title","name","onClick","e","parseInt","distance","coronaPositions","i","icon","url","visible","style","backgroundColoe","className","MapContainerClass","this","React","Component","GoogleApiWrapper","apiKey","unzip","require","FileInput","inputEl","useRef","type","ref","event","preventDefault","log","current","files","size","zipFile","readEntries","entries","forEach","entry","indexOf","readEntryData","readStream","data","on","chunk","dataJson","JSON","parse","setUserHistory","rad","x","Math","PI","getPosition","startLocation","latitudeE7","longitudeE7","getTs","dateStr","calcDangerUserCorona","userAndCoronas","result","dayUserCorons","user","corona","p1","p2","dLat","dLong","a","sin","cos","atan2","sqrt","getDistance","push","App","setUserPositions","setCoronaPositions","userHistory","Object","keys","last2weeksUserLocations","coronas","dayTimeStamp","currDate","getDate","coronaStart","coronaEnd","endTimestampMs","calcUserAndCorona","locations","runningDate","counter","setDate","location","startDate","endDate","calcLast2Weeks","walkingOrRunning","timelineObjects","filter","item","activitySegment","activityType","activity","endLocation","duration","calculateUser","coronaData","lon","t_start","t_end","calculateCorona","dangerUserAndCorons","userPos","userAndCoron","stringify","coronaPos","MapComponent","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1bf963b4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import { Map, InfoWindow, Marker, GoogleApiWrapper } from \"google-maps-react\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nconst getTime = (startTimestampMs) => {\r\n  const thisTime = new Date(Number(startTimestampMs));\r\n  return thisTime;\r\n}\r\n\r\nconst MapContainer = props => {\r\n  const [mapCenter, setMapCenter] = useState({\r\n    latitude: 32.0798809,\r\n    longitude: 34.7855687\r\n  });\r\n\r\n  const [activeMarker, setActiveMarker] = useState({ marker: null, text: null });\r\n\r\n  useEffect(() => {\r\n    if (!navigator.geolocation) {\r\n      alert(\"Geolocation is not supported by your browser\");\r\n    } else {\r\n      const success = position => {\r\n        const { latitude, longitude } = position.coords;\r\n        setMapCenter({ latitude, longitude });\r\n      };\r\n\r\n      const error = err => {\r\n        console.error(`Error google maps ${err}`);\r\n      };\r\n      navigator.geolocation.getCurrentPosition(success, error);\r\n    }\r\n  }, []);\r\n  return (\r\n    <Map\r\n      google={props.google}\r\n      zoom={10}\r\n      initialCenter={{\r\n        lat: 32.0798809,\r\n        lng: 34.7855687\r\n      }}\r\n    >\r\n      {props.userPositions.map(currMarker => (\r\n        <Marker\r\n          key={currMarker.lat + \"_\" + currMarker.lng}\r\n          title={`${currMarker.startTimestampMs}`}\r\n          name={\"SOMA\"}\r\n          position={{ lat: currMarker.lat, lng: currMarker.lng }}\r\n          onClick={(props, marker, e) => setActiveMarker({ marker, text: `User was here at ${getTime(currMarker.startTimestampMs)} distance: ${parseInt(currMarker.distance)} meters` })}\r\n        />\r\n      ))}\r\n\r\n      {props.coronaPositions.map((currMarker, i) => (\r\n        <Marker\r\n          key={currMarker.lat + \"_\" + currMarker.lng + \"_\" + i}\r\n          title={\"ori\"}\r\n          name={\"SOMA\"}\r\n          position={{ lat: currMarker.lat, lng: currMarker.lng }}\r\n          icon={{\r\n            url: \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\"\r\n          }}\r\n          onClick={(props, marker, e) => setActiveMarker({ marker, text: `corona was here at ${getTime(currMarker.startTimestampMs)} distance: ${parseInt(currMarker.distance)} meters` })}\r\n        />\r\n      ))}\r\n\r\n      <InfoWindow\r\n        visible={activeMarker.marker !== null}\r\n        style={{ backgroundColoe: \"#fff\" }}\r\n        marker={activeMarker.marker}\r\n      >\r\n        <div className={\"infoWindow\"}>\r\n          <p>\r\n            {activeMarker.text}\r\n          </p>\r\n        </div>\r\n      </InfoWindow>\r\n    </Map>\r\n  );\r\n};\r\nclass MapContainerClass extends React.Component {\r\n  render() {\r\n    return <MapContainer {...this.props} />;\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: \"AIzaSyCb5MztDrAyVmNx8GC4kFLLJqWqZkt0teA\"\r\n})(MapContainerClass);\r\n","import React, { useRef } from \"react\";\r\nvar unzip = require(\"unzip-js\");\r\n\r\nconst FileInput = props => {\r\n  const inputEl = useRef(null);\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    console.log(`handleSubmit clicked`);\r\n    if (inputEl.current.files[0]) {\r\n      console.log(`Selected file - ${inputEl.current.files[0].name}`);\r\n      console.log(`Selected size - ${inputEl.current.files[0].size}`);\r\n\r\n      unzip(inputEl.current.files[0], (err, zipFile) => {\r\n        if (err) {\r\n          return console.error(err);\r\n        }\r\n\r\n        zipFile.readEntries((err, entries) => {\r\n          if (err) {\r\n            return console.error(err);\r\n          }\r\n\r\n          entries.forEach(function (entry) {\r\n            // console.log(`reading data for ${entry.name}`);\r\n            if (entry.name.indexOf(\"2020_MARCH.json\") > -1) {\r\n              zipFile.readEntryData(entry, false, function (err, readStream) {\r\n                if (err) {\r\n                  return console.error(err);\r\n                }\r\n\r\n                var data = \"\";\r\n\r\n                readStream.on(\"data\", function (chunk) {\r\n                  data += chunk;\r\n                });\r\n                readStream.on(\"error\", function (err) {\r\n                  console.log(`error`);\r\n                });\r\n                readStream.on(\"end\", function () {\r\n                  const dataJson = JSON.parse(data);\r\n\r\n                  props.setUserHistory(dataJson);\r\n                });\r\n              });\r\n            }\r\n          });\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <label>\r\n        Upload file:\r\n        <input type=\"file\" ref={inputEl} />\r\n      </label>\r\n      <br />\r\n      <button onClick={handleSubmit}>Submit</button>\r\n    </div>\r\n  );\r\n};\r\nexport default FileInput;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport MapComponent from \"./maps/MapComponent\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport FileInput from \"./components/FileInput\";\r\n// import demoData from \"./data/demoData.json\";\r\nimport coronaData from \"./data/coronaData.json\";\r\n\r\nvar rad = function (x) {\r\n  return (x * Math.PI) / 180;\r\n};\r\n\r\nvar getDistance = function (p1, p2) {\r\n  var R = 6378137; // Earth’s mean radius in meter\r\n  var dLat = rad(p2.lat - p1.lat);\r\n  var dLong = rad(p2.lng - p1.lng);\r\n  var a =\r\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n    Math.cos(rad(p1.lat)) *\r\n    Math.cos(rad(p2.lat)) *\r\n    Math.sin(dLong / 2) *\r\n    Math.sin(dLong / 2);\r\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n  var d = R * c;\r\n  return d; // returns the distance in meter\r\n};\r\n\r\n\r\n//comment something, and another something...\r\nconst getPosition = startLocation => {\r\n  const { latitudeE7, longitudeE7 } = startLocation;\r\n  const fixedLatitudeE7 =\r\n    latitudeE7 > 900000000 ? latitudeE7 - 4294967296 : latitudeE7;\r\n  const fixedLongitudeE7 =\r\n    longitudeE7 > 1800000000 ? longitudeE7 - 4294967296 : longitudeE7;\r\n  const lat = fixedLatitudeE7 / 10e6;\r\n  const lng = fixedLongitudeE7 / 10e6;\r\n  return { lat, lng };\r\n};\r\n\r\nconst getTs = dateStr => {\r\n  const date = new Date(dateStr);\r\n  return date.getTime();\r\n};\r\nconst calculateCorona = () => {\r\n  const result = [];\r\n  coronaData.forEach(corona => {\r\n    result.push({\r\n      lat: corona.lat,\r\n      lng: corona.lon,\r\n      startTimestampMs: getTs(corona.t_start),\r\n      endTimestampMs: getTs(corona.t_end)\r\n    });\r\n  });\r\n  return result;\r\n};\r\n\r\nconst calculateUser = (userHistory) => {\r\n  const { timelineObjects } = userHistory;\r\n\r\n  const walkingOrRunning = timelineObjects.filter(item => {\r\n    if (item.activitySegment) {\r\n      const { activityType } = item.activitySegment;\r\n\r\n      if (\r\n        activityType === \"WALKING\" ||\r\n        activityType === \"RUNNING\" ||\r\n        activityType === \"STILL\"\r\n      ) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n  });\r\n\r\n  const result = [];\r\n\r\n  walkingOrRunning.forEach(activity => {\r\n    const { activitySegment } = activity;\r\n    const { startLocation, endLocation, duration } = activitySegment;\r\n    result.push({ ...getPosition(startLocation), ...duration });\r\n    result.push({ ...getPosition(endLocation), ...duration });\r\n  });\r\n\r\n  return result;\r\n};\r\n\r\nconst calcLast2Weeks = locations => {\r\n  console.log(`calcLast2Weeks start`);\r\n  const runningDate = new Date();\r\n  let counter = 14;\r\n  const result = {};\r\n  while (counter > 0) {\r\n    runningDate.setDate(runningDate.getDate() - counter);\r\n    result[runningDate.getTime()] = null;\r\n    counter--;\r\n  }\r\n\r\n  Object.keys(result).forEach(dayTimeStamp => {\r\n    const curreDateObj = new Date(Number(dayTimeStamp));\r\n    const currDate = curreDateObj.getDate();\r\n    locations.forEach(location => {\r\n      const startDate = new Date(Number(location.startTimestampMs));\r\n      const endDate = new Date(Number(location.endTimestampMs));\r\n      if (startDate.getDate() === currDate || endDate.getDate() === currDate) {\r\n        result[dayTimeStamp] = location;\r\n      }\r\n    });\r\n  });\r\n\r\n  return result;\r\n};\r\n\r\nconst calcUserAndCorona = (last2weeksUserLocations, coronas) => {\r\n  const result = [];\r\n  Object.keys(last2weeksUserLocations).forEach(dayTimeStamp => {\r\n    if (last2weeksUserLocations[dayTimeStamp] !== null) {\r\n      const curreDateObj = new Date(Number(dayTimeStamp));\r\n      const currDate = curreDateObj.getDate();\r\n      coronas.forEach(corona => {\r\n        const coronaStart = new Date(Number(corona.startTimestampMs));\r\n        const coronaEnd = new Date(Number(corona.endTimestampMs));\r\n\r\n        if (\r\n          coronaStart.getDate() === currDate ||\r\n          coronaEnd.getDate() === currDate\r\n        ) {\r\n          result.push({ user: last2weeksUserLocations[dayTimeStamp], corona });\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  return result;\r\n};\r\n\r\nconst calcDangerUserCorona = userAndCoronas => {\r\n  const result = [];\r\n  userAndCoronas.forEach(dayUserCorons => {\r\n    const { user, corona } = dayUserCorons;\r\n    const distance = getDistance(\r\n      { lat: user.lat, lng: user.lng },\r\n      { lat: corona.lat, lng: corona.lng }\r\n    );\r\n    if (distance <= 200) {\r\n      result.push({ ...dayUserCorons, distance });\r\n    }\r\n  });\r\n\r\n  return result;\r\n};\r\n\r\nfunction App() {\r\n  const [userPositions, setUserPositions] = useState([]);\r\n  const [coronaPositions, setCoronaPositions] = useState([]);\r\n  const [userHistory, setUserHistory] = useState([]);\r\n  useEffect(() => { }, []);\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"App-header\">\r\n        <FileInput setUserHistory={setUserHistory} />\r\n        <div\r\n          className={\"calc\"}\r\n          onClick={() => {\r\n            console.log(`userHistory keys are ${Object.keys(userHistory)}`);\r\n            const locations = calculateUser(userHistory);\r\n            const last2weeksUserLocations = calcLast2Weeks(locations);\r\n            const coronas = calculateCorona();\r\n            const userAndCoronas = calcUserAndCorona(\r\n              last2weeksUserLocations,\r\n              coronas\r\n            );\r\n\r\n            const dangerUserAndCorons = calcDangerUserCorona(userAndCoronas);\r\n            // console.log(\r\n            //   `****DANGER**** ${JSON.stringify(dangerUserAndCorons)}`\r\n            // );\r\n\r\n            const userPos = dangerUserAndCorons.map(userAndCoron => {\r\n              return {\r\n                lat: userAndCoron.user.lat,\r\n                lng: userAndCoron.user.lng,\r\n                startTimestampMs: userAndCoron.user.startTimestampMs,\r\n                endTimestampMs: userAndCoron.user.endTimestampMs,\r\n                distance: userAndCoron.distance\r\n              };\r\n            });\r\n\r\n            console.log(`userPos ${JSON.stringify(userPos)}`);\r\n\r\n            setUserPositions(userPos);\r\n\r\n            const coronaPos = dangerUserAndCorons.map(userAndCoron => {\r\n              return {\r\n                lat: userAndCoron.corona.lat,\r\n                lng: userAndCoron.corona.lng,\r\n                startTimestampMs: userAndCoron.corona.startTimestampMs,\r\n                endTimestampMs: userAndCoron.corona.endTimestampMs,\r\n                distance: userAndCoron.distance\r\n              };\r\n            });\r\n            console.log(`coronaPos ${JSON.stringify(coronaPos)}`);\r\n            setCoronaPositions(coronaPos);\r\n          }}\r\n        >\r\n          Calculate\r\n        </div>\r\n      </div>\r\n\r\n      <MapComponent\r\n        userPositions={userPositions}\r\n        coronaPositions={coronaPositions}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}